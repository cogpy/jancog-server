// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menlo.ai/jan-api-gateway/app/infrastructure/database/dbschema"
)

func newProviderModel(db *gorm.DB, opts ...gen.DOOption) providerModel {
	_providerModel := providerModel{}

	_providerModel.providerModelDo.UseDB(db, opts...)
	_providerModel.providerModelDo.UseModel(&dbschema.ProviderModel{})

	tableName := _providerModel.providerModelDo.TableName()
	_providerModel.ALL = field.NewAsterisk(tableName)
	_providerModel.ID = field.NewUint(tableName, "id")
	_providerModel.CreatedAt = field.NewTime(tableName, "created_at")
	_providerModel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_providerModel.DeletedAt = field.NewField(tableName, "deleted_at")
	_providerModel.ProviderID = field.NewUint(tableName, "provider_id")
	_providerModel.PublicID = field.NewString(tableName, "public_id")
	_providerModel.ModelCatalogID = field.NewUint(tableName, "model_catalog_id")
	_providerModel.ModelKey = field.NewString(tableName, "model_key")
	_providerModel.DisplayName = field.NewString(tableName, "display_name")
	_providerModel.Pricing = field.NewField(tableName, "pricing")
	_providerModel.TokenLimits = field.NewField(tableName, "token_limits")
	_providerModel.Family = field.NewString(tableName, "family")
	_providerModel.SupportsImages = field.NewBool(tableName, "supports_images")
	_providerModel.SupportsEmbeddings = field.NewBool(tableName, "supports_embeddings")
	_providerModel.SupportsReasoning = field.NewBool(tableName, "supports_reasoning")
	_providerModel.Active = field.NewBool(tableName, "active")

	_providerModel.fillFieldMap()

	return _providerModel
}

type providerModel struct {
	providerModelDo

	ALL                field.Asterisk
	ID                 field.Uint
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field
	ProviderID         field.Uint
	PublicID           field.String
	ModelCatalogID     field.Uint
	ModelKey           field.String
	DisplayName        field.String
	Pricing            field.Field
	TokenLimits        field.Field
	Family             field.String
	SupportsImages     field.Bool
	SupportsEmbeddings field.Bool
	SupportsReasoning  field.Bool
	Active             field.Bool

	fieldMap map[string]field.Expr
}

func (p providerModel) Table(newTableName string) *providerModel {
	p.providerModelDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p providerModel) As(alias string) *providerModel {
	p.providerModelDo.DO = *(p.providerModelDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *providerModel) updateTableName(table string) *providerModel {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.ProviderID = field.NewUint(table, "provider_id")
	p.PublicID = field.NewString(table, "public_id")
	p.ModelCatalogID = field.NewUint(table, "model_catalog_id")
	p.ModelKey = field.NewString(table, "model_key")
	p.DisplayName = field.NewString(table, "display_name")
	p.Pricing = field.NewField(table, "pricing")
	p.TokenLimits = field.NewField(table, "token_limits")
	p.Family = field.NewString(table, "family")
	p.SupportsImages = field.NewBool(table, "supports_images")
	p.SupportsEmbeddings = field.NewBool(table, "supports_embeddings")
	p.SupportsReasoning = field.NewBool(table, "supports_reasoning")
	p.Active = field.NewBool(table, "active")

	p.fillFieldMap()

	return p
}

func (p *providerModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *providerModel) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["provider_id"] = p.ProviderID
	p.fieldMap["public_id"] = p.PublicID
	p.fieldMap["model_catalog_id"] = p.ModelCatalogID
	p.fieldMap["model_key"] = p.ModelKey
	p.fieldMap["display_name"] = p.DisplayName
	p.fieldMap["pricing"] = p.Pricing
	p.fieldMap["token_limits"] = p.TokenLimits
	p.fieldMap["family"] = p.Family
	p.fieldMap["supports_images"] = p.SupportsImages
	p.fieldMap["supports_embeddings"] = p.SupportsEmbeddings
	p.fieldMap["supports_reasoning"] = p.SupportsReasoning
	p.fieldMap["active"] = p.Active
}

func (p providerModel) clone(db *gorm.DB) providerModel {
	p.providerModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p providerModel) replaceDB(db *gorm.DB) providerModel {
	p.providerModelDo.ReplaceDB(db)
	return p
}

type providerModelDo struct{ gen.DO }

type IProviderModelDo interface {
	gen.SubQuery
	Debug() IProviderModelDo
	WithContext(ctx context.Context) IProviderModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProviderModelDo
	WriteDB() IProviderModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProviderModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProviderModelDo
	Not(conds ...gen.Condition) IProviderModelDo
	Or(conds ...gen.Condition) IProviderModelDo
	Select(conds ...field.Expr) IProviderModelDo
	Where(conds ...gen.Condition) IProviderModelDo
	Order(conds ...field.Expr) IProviderModelDo
	Distinct(cols ...field.Expr) IProviderModelDo
	Omit(cols ...field.Expr) IProviderModelDo
	Join(table schema.Tabler, on ...field.Expr) IProviderModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProviderModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProviderModelDo
	Group(cols ...field.Expr) IProviderModelDo
	Having(conds ...gen.Condition) IProviderModelDo
	Limit(limit int) IProviderModelDo
	Offset(offset int) IProviderModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProviderModelDo
	Unscoped() IProviderModelDo
	Create(values ...*dbschema.ProviderModel) error
	CreateInBatches(values []*dbschema.ProviderModel, batchSize int) error
	Save(values ...*dbschema.ProviderModel) error
	First() (*dbschema.ProviderModel, error)
	Take() (*dbschema.ProviderModel, error)
	Last() (*dbschema.ProviderModel, error)
	Find() ([]*dbschema.ProviderModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.ProviderModel, err error)
	FindInBatches(result *[]*dbschema.ProviderModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbschema.ProviderModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProviderModelDo
	Assign(attrs ...field.AssignExpr) IProviderModelDo
	Joins(fields ...field.RelationField) IProviderModelDo
	Preload(fields ...field.RelationField) IProviderModelDo
	FirstOrInit() (*dbschema.ProviderModel, error)
	FirstOrCreate() (*dbschema.ProviderModel, error)
	FindByPage(offset int, limit int) (result []*dbschema.ProviderModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProviderModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p providerModelDo) Debug() IProviderModelDo {
	return p.withDO(p.DO.Debug())
}

func (p providerModelDo) WithContext(ctx context.Context) IProviderModelDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p providerModelDo) ReadDB() IProviderModelDo {
	return p.Clauses(dbresolver.Read)
}

func (p providerModelDo) WriteDB() IProviderModelDo {
	return p.Clauses(dbresolver.Write)
}

func (p providerModelDo) Session(config *gorm.Session) IProviderModelDo {
	return p.withDO(p.DO.Session(config))
}

func (p providerModelDo) Clauses(conds ...clause.Expression) IProviderModelDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p providerModelDo) Returning(value interface{}, columns ...string) IProviderModelDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p providerModelDo) Not(conds ...gen.Condition) IProviderModelDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p providerModelDo) Or(conds ...gen.Condition) IProviderModelDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p providerModelDo) Select(conds ...field.Expr) IProviderModelDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p providerModelDo) Where(conds ...gen.Condition) IProviderModelDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p providerModelDo) Order(conds ...field.Expr) IProviderModelDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p providerModelDo) Distinct(cols ...field.Expr) IProviderModelDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p providerModelDo) Omit(cols ...field.Expr) IProviderModelDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p providerModelDo) Join(table schema.Tabler, on ...field.Expr) IProviderModelDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p providerModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProviderModelDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p providerModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IProviderModelDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p providerModelDo) Group(cols ...field.Expr) IProviderModelDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p providerModelDo) Having(conds ...gen.Condition) IProviderModelDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p providerModelDo) Limit(limit int) IProviderModelDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p providerModelDo) Offset(offset int) IProviderModelDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p providerModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProviderModelDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p providerModelDo) Unscoped() IProviderModelDo {
	return p.withDO(p.DO.Unscoped())
}

func (p providerModelDo) Create(values ...*dbschema.ProviderModel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p providerModelDo) CreateInBatches(values []*dbschema.ProviderModel, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p providerModelDo) Save(values ...*dbschema.ProviderModel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p providerModelDo) First() (*dbschema.ProviderModel, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProviderModel), nil
	}
}

func (p providerModelDo) Take() (*dbschema.ProviderModel, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProviderModel), nil
	}
}

func (p providerModelDo) Last() (*dbschema.ProviderModel, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProviderModel), nil
	}
}

func (p providerModelDo) Find() ([]*dbschema.ProviderModel, error) {
	result, err := p.DO.Find()
	return result.([]*dbschema.ProviderModel), err
}

func (p providerModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.ProviderModel, err error) {
	buf := make([]*dbschema.ProviderModel, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p providerModelDo) FindInBatches(result *[]*dbschema.ProviderModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p providerModelDo) Attrs(attrs ...field.AssignExpr) IProviderModelDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p providerModelDo) Assign(attrs ...field.AssignExpr) IProviderModelDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p providerModelDo) Joins(fields ...field.RelationField) IProviderModelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p providerModelDo) Preload(fields ...field.RelationField) IProviderModelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p providerModelDo) FirstOrInit() (*dbschema.ProviderModel, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProviderModel), nil
	}
}

func (p providerModelDo) FirstOrCreate() (*dbschema.ProviderModel, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ProviderModel), nil
	}
}

func (p providerModelDo) FindByPage(offset int, limit int) (result []*dbschema.ProviderModel, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p providerModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p providerModelDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p providerModelDo) Delete(models ...*dbschema.ProviderModel) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *providerModelDo) withDO(do gen.Dao) *providerModelDo {
	p.DO = *do.(*gen.DO)
	return p
}
