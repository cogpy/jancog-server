// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menlo.ai/jan-api-gateway/app/infrastructure/database/dbschema"
)

func newWorkspace(db *gorm.DB, opts ...gen.DOOption) workspace {
	_workspace := workspace{}

	_workspace.workspaceDo.UseDB(db, opts...)
	_workspace.workspaceDo.UseModel(&dbschema.Workspace{})

	tableName := _workspace.workspaceDo.TableName()
	_workspace.ALL = field.NewAsterisk(tableName)
	_workspace.ID = field.NewUint(tableName, "id")
	_workspace.CreatedAt = field.NewTime(tableName, "created_at")
	_workspace.UpdatedAt = field.NewTime(tableName, "updated_at")
	_workspace.DeletedAt = field.NewField(tableName, "deleted_at")
	_workspace.PublicID = field.NewString(tableName, "public_id")
	_workspace.UserID = field.NewUint(tableName, "user_id")
	_workspace.Name = field.NewString(tableName, "name")
	_workspace.Instruction = field.NewString(tableName, "instruction")
	_workspace.Conversations = workspaceHasManyConversations{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Conversations", "dbschema.Conversation"),
		User: struct {
			field.RelationField
			Organizations struct {
				field.RelationField
			}
			Projects struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Conversations.User", "dbschema.User"),
			Organizations: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Conversations.User.Organizations", "dbschema.OrganizationMember"),
			},
			Projects: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Conversations.User.Projects", "dbschema.ProjectMember"),
			},
		},
		Workspace: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
			Conversations struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Conversations.Workspace", "dbschema.Workspace"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Conversations.Workspace.User", "dbschema.User"),
			},
			Conversations: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Conversations.Workspace.Conversations", "dbschema.Conversation"),
			},
		},
		Items: struct {
			field.RelationField
			Conversation struct {
				field.RelationField
			}
			Response struct {
				field.RelationField
				UserEntity struct {
					field.RelationField
				}
				Conversation struct {
					field.RelationField
				}
				Items struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Conversations.Items", "dbschema.Item"),
			Conversation: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Conversations.Items.Conversation", "dbschema.Conversation"),
			},
			Response: struct {
				field.RelationField
				UserEntity struct {
					field.RelationField
				}
				Conversation struct {
					field.RelationField
				}
				Items struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Conversations.Items.Response", "dbschema.Response"),
				UserEntity: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Conversations.Items.Response.UserEntity", "dbschema.User"),
				},
				Conversation: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Conversations.Items.Response.Conversation", "dbschema.Conversation"),
				},
				Items: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Conversations.Items.Response.Items", "dbschema.Item"),
				},
			},
		},
	}

	_workspace.User = workspaceBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "dbschema.User"),
	}

	_workspace.fillFieldMap()

	return _workspace
}

type workspace struct {
	workspaceDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	PublicID      field.String
	UserID        field.Uint
	Name          field.String
	Instruction   field.String
	Conversations workspaceHasManyConversations

	User workspaceBelongsToUser

	fieldMap map[string]field.Expr
}

func (w workspace) Table(newTableName string) *workspace {
	w.workspaceDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w workspace) As(alias string) *workspace {
	w.workspaceDo.DO = *(w.workspaceDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *workspace) updateTableName(table string) *workspace {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewUint(table, "id")
	w.CreatedAt = field.NewTime(table, "created_at")
	w.UpdatedAt = field.NewTime(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")
	w.PublicID = field.NewString(table, "public_id")
	w.UserID = field.NewUint(table, "user_id")
	w.Name = field.NewString(table, "name")
	w.Instruction = field.NewString(table, "instruction")

	w.fillFieldMap()

	return w
}

func (w *workspace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *workspace) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
	w.fieldMap["public_id"] = w.PublicID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["name"] = w.Name
	w.fieldMap["instruction"] = w.Instruction

}

func (w workspace) clone(db *gorm.DB) workspace {
	w.workspaceDo.ReplaceConnPool(db.Statement.ConnPool)
	w.Conversations.db = db.Session(&gorm.Session{Initialized: true})
	w.Conversations.db.Statement.ConnPool = db.Statement.ConnPool
	w.User.db = db.Session(&gorm.Session{Initialized: true})
	w.User.db.Statement.ConnPool = db.Statement.ConnPool
	return w
}

func (w workspace) replaceDB(db *gorm.DB) workspace {
	w.workspaceDo.ReplaceDB(db)
	w.Conversations.db = db.Session(&gorm.Session{})
	w.User.db = db.Session(&gorm.Session{})
	return w
}

type workspaceHasManyConversations struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		Organizations struct {
			field.RelationField
		}
		Projects struct {
			field.RelationField
		}
	}
	Workspace struct {
		field.RelationField
		User struct {
			field.RelationField
		}
		Conversations struct {
			field.RelationField
		}
	}
	Items struct {
		field.RelationField
		Conversation struct {
			field.RelationField
		}
		Response struct {
			field.RelationField
			UserEntity struct {
				field.RelationField
			}
			Conversation struct {
				field.RelationField
			}
			Items struct {
				field.RelationField
			}
		}
	}
}

func (a workspaceHasManyConversations) Where(conds ...field.Expr) *workspaceHasManyConversations {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceHasManyConversations) WithContext(ctx context.Context) *workspaceHasManyConversations {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceHasManyConversations) Session(session *gorm.Session) *workspaceHasManyConversations {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceHasManyConversations) Model(m *dbschema.Workspace) *workspaceHasManyConversationsTx {
	return &workspaceHasManyConversationsTx{a.db.Model(m).Association(a.Name())}
}

func (a workspaceHasManyConversations) Unscoped() *workspaceHasManyConversations {
	a.db = a.db.Unscoped()
	return &a
}

type workspaceHasManyConversationsTx struct{ tx *gorm.Association }

func (a workspaceHasManyConversationsTx) Find() (result []*dbschema.Conversation, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceHasManyConversationsTx) Append(values ...*dbschema.Conversation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceHasManyConversationsTx) Replace(values ...*dbschema.Conversation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceHasManyConversationsTx) Delete(values ...*dbschema.Conversation) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceHasManyConversationsTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceHasManyConversationsTx) Count() int64 {
	return a.tx.Count()
}

func (a workspaceHasManyConversationsTx) Unscoped() *workspaceHasManyConversationsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type workspaceBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a workspaceBelongsToUser) Where(conds ...field.Expr) *workspaceBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a workspaceBelongsToUser) WithContext(ctx context.Context) *workspaceBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a workspaceBelongsToUser) Session(session *gorm.Session) *workspaceBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a workspaceBelongsToUser) Model(m *dbschema.Workspace) *workspaceBelongsToUserTx {
	return &workspaceBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a workspaceBelongsToUser) Unscoped() *workspaceBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type workspaceBelongsToUserTx struct{ tx *gorm.Association }

func (a workspaceBelongsToUserTx) Find() (result *dbschema.User, err error) {
	return result, a.tx.Find(&result)
}

func (a workspaceBelongsToUserTx) Append(values ...*dbschema.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a workspaceBelongsToUserTx) Replace(values ...*dbschema.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a workspaceBelongsToUserTx) Delete(values ...*dbschema.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a workspaceBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a workspaceBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a workspaceBelongsToUserTx) Unscoped() *workspaceBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type workspaceDo struct{ gen.DO }

type IWorkspaceDo interface {
	gen.SubQuery
	Debug() IWorkspaceDo
	WithContext(ctx context.Context) IWorkspaceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWorkspaceDo
	WriteDB() IWorkspaceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWorkspaceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWorkspaceDo
	Not(conds ...gen.Condition) IWorkspaceDo
	Or(conds ...gen.Condition) IWorkspaceDo
	Select(conds ...field.Expr) IWorkspaceDo
	Where(conds ...gen.Condition) IWorkspaceDo
	Order(conds ...field.Expr) IWorkspaceDo
	Distinct(cols ...field.Expr) IWorkspaceDo
	Omit(cols ...field.Expr) IWorkspaceDo
	Join(table schema.Tabler, on ...field.Expr) IWorkspaceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspaceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWorkspaceDo
	Group(cols ...field.Expr) IWorkspaceDo
	Having(conds ...gen.Condition) IWorkspaceDo
	Limit(limit int) IWorkspaceDo
	Offset(offset int) IWorkspaceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspaceDo
	Unscoped() IWorkspaceDo
	Create(values ...*dbschema.Workspace) error
	CreateInBatches(values []*dbschema.Workspace, batchSize int) error
	Save(values ...*dbschema.Workspace) error
	First() (*dbschema.Workspace, error)
	Take() (*dbschema.Workspace, error)
	Last() (*dbschema.Workspace, error)
	Find() ([]*dbschema.Workspace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.Workspace, err error)
	FindInBatches(result *[]*dbschema.Workspace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbschema.Workspace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWorkspaceDo
	Assign(attrs ...field.AssignExpr) IWorkspaceDo
	Joins(fields ...field.RelationField) IWorkspaceDo
	Preload(fields ...field.RelationField) IWorkspaceDo
	FirstOrInit() (*dbschema.Workspace, error)
	FirstOrCreate() (*dbschema.Workspace, error)
	FindByPage(offset int, limit int) (result []*dbschema.Workspace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWorkspaceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w workspaceDo) Debug() IWorkspaceDo {
	return w.withDO(w.DO.Debug())
}

func (w workspaceDo) WithContext(ctx context.Context) IWorkspaceDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w workspaceDo) ReadDB() IWorkspaceDo {
	return w.Clauses(dbresolver.Read)
}

func (w workspaceDo) WriteDB() IWorkspaceDo {
	return w.Clauses(dbresolver.Write)
}

func (w workspaceDo) Session(config *gorm.Session) IWorkspaceDo {
	return w.withDO(w.DO.Session(config))
}

func (w workspaceDo) Clauses(conds ...clause.Expression) IWorkspaceDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w workspaceDo) Returning(value interface{}, columns ...string) IWorkspaceDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w workspaceDo) Not(conds ...gen.Condition) IWorkspaceDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w workspaceDo) Or(conds ...gen.Condition) IWorkspaceDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w workspaceDo) Select(conds ...field.Expr) IWorkspaceDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w workspaceDo) Where(conds ...gen.Condition) IWorkspaceDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w workspaceDo) Order(conds ...field.Expr) IWorkspaceDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w workspaceDo) Distinct(cols ...field.Expr) IWorkspaceDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w workspaceDo) Omit(cols ...field.Expr) IWorkspaceDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w workspaceDo) Join(table schema.Tabler, on ...field.Expr) IWorkspaceDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w workspaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWorkspaceDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w workspaceDo) RightJoin(table schema.Tabler, on ...field.Expr) IWorkspaceDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w workspaceDo) Group(cols ...field.Expr) IWorkspaceDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w workspaceDo) Having(conds ...gen.Condition) IWorkspaceDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w workspaceDo) Limit(limit int) IWorkspaceDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w workspaceDo) Offset(offset int) IWorkspaceDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w workspaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWorkspaceDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w workspaceDo) Unscoped() IWorkspaceDo {
	return w.withDO(w.DO.Unscoped())
}

func (w workspaceDo) Create(values ...*dbschema.Workspace) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w workspaceDo) CreateInBatches(values []*dbschema.Workspace, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w workspaceDo) Save(values ...*dbschema.Workspace) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w workspaceDo) First() (*dbschema.Workspace, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Workspace), nil
	}
}

func (w workspaceDo) Take() (*dbschema.Workspace, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Workspace), nil
	}
}

func (w workspaceDo) Last() (*dbschema.Workspace, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Workspace), nil
	}
}

func (w workspaceDo) Find() ([]*dbschema.Workspace, error) {
	result, err := w.DO.Find()
	return result.([]*dbschema.Workspace), err
}

func (w workspaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.Workspace, err error) {
	buf := make([]*dbschema.Workspace, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w workspaceDo) FindInBatches(result *[]*dbschema.Workspace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w workspaceDo) Attrs(attrs ...field.AssignExpr) IWorkspaceDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w workspaceDo) Assign(attrs ...field.AssignExpr) IWorkspaceDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w workspaceDo) Joins(fields ...field.RelationField) IWorkspaceDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w workspaceDo) Preload(fields ...field.RelationField) IWorkspaceDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w workspaceDo) FirstOrInit() (*dbschema.Workspace, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Workspace), nil
	}
}

func (w workspaceDo) FirstOrCreate() (*dbschema.Workspace, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Workspace), nil
	}
}

func (w workspaceDo) FindByPage(offset int, limit int) (result []*dbschema.Workspace, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w workspaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w workspaceDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w workspaceDo) Delete(models ...*dbschema.Workspace) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *workspaceDo) withDO(do gen.Dao) *workspaceDo {
	w.DO = *do.(*gen.DO)
	return w
}
