// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menlo.ai/jan-api-gateway/app/infrastructure/database/dbschema"
)

func newModelCatalog(db *gorm.DB, opts ...gen.DOOption) modelCatalog {
	_modelCatalog := modelCatalog{}

	_modelCatalog.modelCatalogDo.UseDB(db, opts...)
	_modelCatalog.modelCatalogDo.UseModel(&dbschema.ModelCatalog{})

	tableName := _modelCatalog.modelCatalogDo.TableName()
	_modelCatalog.ALL = field.NewAsterisk(tableName)
	_modelCatalog.ID = field.NewUint(tableName, "id")
	_modelCatalog.CreatedAt = field.NewTime(tableName, "created_at")
	_modelCatalog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_modelCatalog.DeletedAt = field.NewField(tableName, "deleted_at")
	_modelCatalog.PublicID = field.NewString(tableName, "public_id")
	_modelCatalog.SupportedParameters = field.NewField(tableName, "supported_parameters")
	_modelCatalog.Architecture = field.NewField(tableName, "architecture")
	_modelCatalog.Tags = field.NewField(tableName, "tags")
	_modelCatalog.Notes = field.NewString(tableName, "notes")
	_modelCatalog.IsModerated = field.NewBool(tableName, "is_moderated")
	_modelCatalog.Status = field.NewString(tableName, "status")
	_modelCatalog.Extras = field.NewField(tableName, "extras")

	_modelCatalog.fillFieldMap()

	return _modelCatalog
}

type modelCatalog struct {
	modelCatalogDo

	ALL                 field.Asterisk
	ID                  field.Uint
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Field
	PublicID            field.String
	SupportedParameters field.Field
	Architecture        field.Field
	Tags                field.Field
	Notes               field.String
	IsModerated         field.Bool
	Status              field.String
	Extras              field.Field

	fieldMap map[string]field.Expr
}

func (m modelCatalog) Table(newTableName string) *modelCatalog {
	m.modelCatalogDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m modelCatalog) As(alias string) *modelCatalog {
	m.modelCatalogDo.DO = *(m.modelCatalogDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *modelCatalog) updateTableName(table string) *modelCatalog {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewUint(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.PublicID = field.NewString(table, "public_id")
	m.SupportedParameters = field.NewField(table, "supported_parameters")
	m.Architecture = field.NewField(table, "architecture")
	m.Tags = field.NewField(table, "tags")
	m.Notes = field.NewString(table, "notes")
	m.IsModerated = field.NewBool(table, "is_moderated")
	m.Status = field.NewString(table, "status")
	m.Extras = field.NewField(table, "extras")

	m.fillFieldMap()

	return m
}

func (m *modelCatalog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *modelCatalog) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 12)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["public_id"] = m.PublicID
	m.fieldMap["supported_parameters"] = m.SupportedParameters
	m.fieldMap["architecture"] = m.Architecture
	m.fieldMap["tags"] = m.Tags
	m.fieldMap["notes"] = m.Notes
	m.fieldMap["is_moderated"] = m.IsModerated
	m.fieldMap["status"] = m.Status
	m.fieldMap["extras"] = m.Extras
}

func (m modelCatalog) clone(db *gorm.DB) modelCatalog {
	m.modelCatalogDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m modelCatalog) replaceDB(db *gorm.DB) modelCatalog {
	m.modelCatalogDo.ReplaceDB(db)
	return m
}

type modelCatalogDo struct{ gen.DO }

type IModelCatalogDo interface {
	gen.SubQuery
	Debug() IModelCatalogDo
	WithContext(ctx context.Context) IModelCatalogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IModelCatalogDo
	WriteDB() IModelCatalogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IModelCatalogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IModelCatalogDo
	Not(conds ...gen.Condition) IModelCatalogDo
	Or(conds ...gen.Condition) IModelCatalogDo
	Select(conds ...field.Expr) IModelCatalogDo
	Where(conds ...gen.Condition) IModelCatalogDo
	Order(conds ...field.Expr) IModelCatalogDo
	Distinct(cols ...field.Expr) IModelCatalogDo
	Omit(cols ...field.Expr) IModelCatalogDo
	Join(table schema.Tabler, on ...field.Expr) IModelCatalogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IModelCatalogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IModelCatalogDo
	Group(cols ...field.Expr) IModelCatalogDo
	Having(conds ...gen.Condition) IModelCatalogDo
	Limit(limit int) IModelCatalogDo
	Offset(offset int) IModelCatalogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IModelCatalogDo
	Unscoped() IModelCatalogDo
	Create(values ...*dbschema.ModelCatalog) error
	CreateInBatches(values []*dbschema.ModelCatalog, batchSize int) error
	Save(values ...*dbschema.ModelCatalog) error
	First() (*dbschema.ModelCatalog, error)
	Take() (*dbschema.ModelCatalog, error)
	Last() (*dbschema.ModelCatalog, error)
	Find() ([]*dbschema.ModelCatalog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.ModelCatalog, err error)
	FindInBatches(result *[]*dbschema.ModelCatalog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbschema.ModelCatalog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IModelCatalogDo
	Assign(attrs ...field.AssignExpr) IModelCatalogDo
	Joins(fields ...field.RelationField) IModelCatalogDo
	Preload(fields ...field.RelationField) IModelCatalogDo
	FirstOrInit() (*dbschema.ModelCatalog, error)
	FirstOrCreate() (*dbschema.ModelCatalog, error)
	FindByPage(offset int, limit int) (result []*dbschema.ModelCatalog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IModelCatalogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m modelCatalogDo) Debug() IModelCatalogDo {
	return m.withDO(m.DO.Debug())
}

func (m modelCatalogDo) WithContext(ctx context.Context) IModelCatalogDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m modelCatalogDo) ReadDB() IModelCatalogDo {
	return m.Clauses(dbresolver.Read)
}

func (m modelCatalogDo) WriteDB() IModelCatalogDo {
	return m.Clauses(dbresolver.Write)
}

func (m modelCatalogDo) Session(config *gorm.Session) IModelCatalogDo {
	return m.withDO(m.DO.Session(config))
}

func (m modelCatalogDo) Clauses(conds ...clause.Expression) IModelCatalogDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m modelCatalogDo) Returning(value interface{}, columns ...string) IModelCatalogDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m modelCatalogDo) Not(conds ...gen.Condition) IModelCatalogDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m modelCatalogDo) Or(conds ...gen.Condition) IModelCatalogDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m modelCatalogDo) Select(conds ...field.Expr) IModelCatalogDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m modelCatalogDo) Where(conds ...gen.Condition) IModelCatalogDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m modelCatalogDo) Order(conds ...field.Expr) IModelCatalogDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m modelCatalogDo) Distinct(cols ...field.Expr) IModelCatalogDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m modelCatalogDo) Omit(cols ...field.Expr) IModelCatalogDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m modelCatalogDo) Join(table schema.Tabler, on ...field.Expr) IModelCatalogDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m modelCatalogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IModelCatalogDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m modelCatalogDo) RightJoin(table schema.Tabler, on ...field.Expr) IModelCatalogDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m modelCatalogDo) Group(cols ...field.Expr) IModelCatalogDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m modelCatalogDo) Having(conds ...gen.Condition) IModelCatalogDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m modelCatalogDo) Limit(limit int) IModelCatalogDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m modelCatalogDo) Offset(offset int) IModelCatalogDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m modelCatalogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IModelCatalogDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m modelCatalogDo) Unscoped() IModelCatalogDo {
	return m.withDO(m.DO.Unscoped())
}

func (m modelCatalogDo) Create(values ...*dbschema.ModelCatalog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m modelCatalogDo) CreateInBatches(values []*dbschema.ModelCatalog, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m modelCatalogDo) Save(values ...*dbschema.ModelCatalog) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m modelCatalogDo) First() (*dbschema.ModelCatalog, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelCatalog), nil
	}
}

func (m modelCatalogDo) Take() (*dbschema.ModelCatalog, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelCatalog), nil
	}
}

func (m modelCatalogDo) Last() (*dbschema.ModelCatalog, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelCatalog), nil
	}
}

func (m modelCatalogDo) Find() ([]*dbschema.ModelCatalog, error) {
	result, err := m.DO.Find()
	return result.([]*dbschema.ModelCatalog), err
}

func (m modelCatalogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.ModelCatalog, err error) {
	buf := make([]*dbschema.ModelCatalog, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m modelCatalogDo) FindInBatches(result *[]*dbschema.ModelCatalog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m modelCatalogDo) Attrs(attrs ...field.AssignExpr) IModelCatalogDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m modelCatalogDo) Assign(attrs ...field.AssignExpr) IModelCatalogDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m modelCatalogDo) Joins(fields ...field.RelationField) IModelCatalogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m modelCatalogDo) Preload(fields ...field.RelationField) IModelCatalogDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m modelCatalogDo) FirstOrInit() (*dbschema.ModelCatalog, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelCatalog), nil
	}
}

func (m modelCatalogDo) FirstOrCreate() (*dbschema.ModelCatalog, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.ModelCatalog), nil
	}
}

func (m modelCatalogDo) FindByPage(offset int, limit int) (result []*dbschema.ModelCatalog, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m modelCatalogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m modelCatalogDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m modelCatalogDo) Delete(models ...*dbschema.ModelCatalog) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *modelCatalogDo) withDO(do gen.Dao) *modelCatalogDo {
	m.DO = *do.(*gen.DO)
	return m
}
