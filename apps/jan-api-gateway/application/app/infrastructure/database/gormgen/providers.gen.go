// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gormgen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"menlo.ai/jan-api-gateway/app/infrastructure/database/dbschema"
)

func newProvider(db *gorm.DB, opts ...gen.DOOption) provider {
	_provider := provider{}

	_provider.providerDo.UseDB(db, opts...)
	_provider.providerDo.UseModel(&dbschema.Provider{})

	tableName := _provider.providerDo.TableName()
	_provider.ALL = field.NewAsterisk(tableName)
	_provider.ID = field.NewUint(tableName, "id")
	_provider.CreatedAt = field.NewTime(tableName, "created_at")
	_provider.UpdatedAt = field.NewTime(tableName, "updated_at")
	_provider.DeletedAt = field.NewField(tableName, "deleted_at")
	_provider.PublicID = field.NewString(tableName, "public_id")
	_provider.Slug = field.NewString(tableName, "slug")
	_provider.OrganizationID = field.NewUint(tableName, "organization_id")
	_provider.ProjectID = field.NewUint(tableName, "project_id")
	_provider.DisplayName = field.NewString(tableName, "display_name")
	_provider.Kind = field.NewString(tableName, "kind")
	_provider.BaseURL = field.NewString(tableName, "base_url")
	_provider.EncryptedAPIKey = field.NewString(tableName, "encrypted_api_key")
	_provider.APIKeyHint = field.NewString(tableName, "api_key_hint")
	_provider.IsModerated = field.NewBool(tableName, "is_moderated")
	_provider.Active = field.NewBool(tableName, "active")
	_provider.Metadata = field.NewField(tableName, "metadata")
	_provider.LastSyncedAt = field.NewTime(tableName, "last_synced_at")

	_provider.fillFieldMap()

	return _provider
}

type provider struct {
	providerDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	PublicID        field.String
	Slug            field.String
	OrganizationID  field.Uint
	ProjectID       field.Uint
	DisplayName     field.String
	Kind            field.String
	BaseURL         field.String
	EncryptedAPIKey field.String
	APIKeyHint      field.String
	IsModerated     field.Bool
	Active          field.Bool
	Metadata        field.Field
	LastSyncedAt    field.Time

	fieldMap map[string]field.Expr
}

func (p provider) Table(newTableName string) *provider {
	p.providerDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p provider) As(alias string) *provider {
	p.providerDo.DO = *(p.providerDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *provider) updateTableName(table string) *provider {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.PublicID = field.NewString(table, "public_id")
	p.Slug = field.NewString(table, "slug")
	p.OrganizationID = field.NewUint(table, "organization_id")
	p.ProjectID = field.NewUint(table, "project_id")
	p.DisplayName = field.NewString(table, "display_name")
	p.Kind = field.NewString(table, "kind")
	p.BaseURL = field.NewString(table, "base_url")
	p.EncryptedAPIKey = field.NewString(table, "encrypted_api_key")
	p.APIKeyHint = field.NewString(table, "api_key_hint")
	p.IsModerated = field.NewBool(table, "is_moderated")
	p.Active = field.NewBool(table, "active")
	p.Metadata = field.NewField(table, "metadata")
	p.LastSyncedAt = field.NewTime(table, "last_synced_at")

	p.fillFieldMap()

	return p
}

func (p *provider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *provider) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 17)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["public_id"] = p.PublicID
	p.fieldMap["slug"] = p.Slug
	p.fieldMap["organization_id"] = p.OrganizationID
	p.fieldMap["project_id"] = p.ProjectID
	p.fieldMap["display_name"] = p.DisplayName
	p.fieldMap["kind"] = p.Kind
	p.fieldMap["base_url"] = p.BaseURL
	p.fieldMap["encrypted_api_key"] = p.EncryptedAPIKey
	p.fieldMap["api_key_hint"] = p.APIKeyHint
	p.fieldMap["is_moderated"] = p.IsModerated
	p.fieldMap["active"] = p.Active
	p.fieldMap["metadata"] = p.Metadata
	p.fieldMap["last_synced_at"] = p.LastSyncedAt
}

func (p provider) clone(db *gorm.DB) provider {
	p.providerDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p provider) replaceDB(db *gorm.DB) provider {
	p.providerDo.ReplaceDB(db)
	return p
}

type providerDo struct{ gen.DO }

type IProviderDo interface {
	gen.SubQuery
	Debug() IProviderDo
	WithContext(ctx context.Context) IProviderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProviderDo
	WriteDB() IProviderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProviderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProviderDo
	Not(conds ...gen.Condition) IProviderDo
	Or(conds ...gen.Condition) IProviderDo
	Select(conds ...field.Expr) IProviderDo
	Where(conds ...gen.Condition) IProviderDo
	Order(conds ...field.Expr) IProviderDo
	Distinct(cols ...field.Expr) IProviderDo
	Omit(cols ...field.Expr) IProviderDo
	Join(table schema.Tabler, on ...field.Expr) IProviderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProviderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProviderDo
	Group(cols ...field.Expr) IProviderDo
	Having(conds ...gen.Condition) IProviderDo
	Limit(limit int) IProviderDo
	Offset(offset int) IProviderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProviderDo
	Unscoped() IProviderDo
	Create(values ...*dbschema.Provider) error
	CreateInBatches(values []*dbschema.Provider, batchSize int) error
	Save(values ...*dbschema.Provider) error
	First() (*dbschema.Provider, error)
	Take() (*dbschema.Provider, error)
	Last() (*dbschema.Provider, error)
	Find() ([]*dbschema.Provider, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.Provider, err error)
	FindInBatches(result *[]*dbschema.Provider, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbschema.Provider) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProviderDo
	Assign(attrs ...field.AssignExpr) IProviderDo
	Joins(fields ...field.RelationField) IProviderDo
	Preload(fields ...field.RelationField) IProviderDo
	FirstOrInit() (*dbschema.Provider, error)
	FirstOrCreate() (*dbschema.Provider, error)
	FindByPage(offset int, limit int) (result []*dbschema.Provider, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProviderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p providerDo) Debug() IProviderDo {
	return p.withDO(p.DO.Debug())
}

func (p providerDo) WithContext(ctx context.Context) IProviderDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p providerDo) ReadDB() IProviderDo {
	return p.Clauses(dbresolver.Read)
}

func (p providerDo) WriteDB() IProviderDo {
	return p.Clauses(dbresolver.Write)
}

func (p providerDo) Session(config *gorm.Session) IProviderDo {
	return p.withDO(p.DO.Session(config))
}

func (p providerDo) Clauses(conds ...clause.Expression) IProviderDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p providerDo) Returning(value interface{}, columns ...string) IProviderDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p providerDo) Not(conds ...gen.Condition) IProviderDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p providerDo) Or(conds ...gen.Condition) IProviderDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p providerDo) Select(conds ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p providerDo) Where(conds ...gen.Condition) IProviderDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p providerDo) Order(conds ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p providerDo) Distinct(cols ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p providerDo) Omit(cols ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p providerDo) Join(table schema.Tabler, on ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p providerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProviderDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p providerDo) RightJoin(table schema.Tabler, on ...field.Expr) IProviderDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p providerDo) Group(cols ...field.Expr) IProviderDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p providerDo) Having(conds ...gen.Condition) IProviderDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p providerDo) Limit(limit int) IProviderDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p providerDo) Offset(offset int) IProviderDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p providerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProviderDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p providerDo) Unscoped() IProviderDo {
	return p.withDO(p.DO.Unscoped())
}

func (p providerDo) Create(values ...*dbschema.Provider) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p providerDo) CreateInBatches(values []*dbschema.Provider, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p providerDo) Save(values ...*dbschema.Provider) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p providerDo) First() (*dbschema.Provider, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Provider), nil
	}
}

func (p providerDo) Take() (*dbschema.Provider, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Provider), nil
	}
}

func (p providerDo) Last() (*dbschema.Provider, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Provider), nil
	}
}

func (p providerDo) Find() ([]*dbschema.Provider, error) {
	result, err := p.DO.Find()
	return result.([]*dbschema.Provider), err
}

func (p providerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbschema.Provider, err error) {
	buf := make([]*dbschema.Provider, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p providerDo) FindInBatches(result *[]*dbschema.Provider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p providerDo) Attrs(attrs ...field.AssignExpr) IProviderDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p providerDo) Assign(attrs ...field.AssignExpr) IProviderDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p providerDo) Joins(fields ...field.RelationField) IProviderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p providerDo) Preload(fields ...field.RelationField) IProviderDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p providerDo) FirstOrInit() (*dbschema.Provider, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Provider), nil
	}
}

func (p providerDo) FirstOrCreate() (*dbschema.Provider, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbschema.Provider), nil
	}
}

func (p providerDo) FindByPage(offset int, limit int) (result []*dbschema.Provider, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p providerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p providerDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p providerDo) Delete(models ...*dbschema.Provider) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *providerDo) withDO(do gen.Dao) *providerDo {
	p.DO = *do.(*gen.DO)
	return p
}
