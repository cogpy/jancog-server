// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"gorm.io/gorm"
	"menlo.ai/jan-api-gateway/app/domain/apikey"
	"menlo.ai/jan-api-gateway/app/domain/auth"
	"menlo.ai/jan-api-gateway/app/domain/conversation"
	"menlo.ai/jan-api-gateway/app/domain/cron"
	"menlo.ai/jan-api-gateway/app/domain/invite"
	"menlo.ai/jan-api-gateway/app/domain/mcp/serpermcp"
	"menlo.ai/jan-api-gateway/app/domain/model"
	"menlo.ai/jan-api-gateway/app/domain/organization"
	"menlo.ai/jan-api-gateway/app/domain/project"
	"menlo.ai/jan-api-gateway/app/domain/response"
	"menlo.ai/jan-api-gateway/app/domain/user"
	"menlo.ai/jan-api-gateway/app/domain/workspace"
	"menlo.ai/jan-api-gateway/app/infrastructure/cache"
	"menlo.ai/jan-api-gateway/app/infrastructure/database"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/apikeyrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/conversationrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/inviterepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/itemrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/modelrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/organizationrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/projectrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/responserepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/transaction"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/userrepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/database/repository/workspacerepo"
	"menlo.ai/jan-api-gateway/app/infrastructure/inference"
	"menlo.ai/jan-api-gateway/app/interfaces/http"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1"
	auth2 "menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/auth"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/auth/google"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/chat"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/conv"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/conversations"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/mcp"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/mcp/mcp_impl"
	organization2 "menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/organization"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/organization/invites"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/organization/projects"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/organization/projects/api_keys"
	"menlo.ai/jan-api-gateway/app/interfaces/http/routes/v1/responses"
)

import (
	_ "github.com/grafana/pyroscope-go/godeltaprof/http/pprof"
	_ "net/http/pprof"
)

// Injectors from wire.go:

func CreateApplication() (*Application, error) {
	db, err := database.NewDB()
	if err != nil {
		return nil, err
	}
	transactionDatabase := transaction.NewDatabase(db)
	organizationRepository := organizationrepo.NewOrganizationGormRepository(transactionDatabase)
	organizationService := organization.NewService(organizationRepository)
	userRepository := userrepo.NewUserGormRepository(transactionDatabase)
	redisCacheService := cache.NewRedisCacheService()
	userService := user.NewService(userRepository, redisCacheService)
	apiKeyRepository := apikeyrepo.NewApiKeyGormRepository(transactionDatabase)
	apiKeyService := apikey.NewService(apiKeyRepository, organizationService)
	projectRepository := projectrepo.NewProjectGormRepository(transactionDatabase)
	projectService := project.NewService(projectRepository)
	providerRepository := modelrepo.NewProviderGormRepository(transactionDatabase)
	providerModelRepository := modelrepo.NewProviderModelGormRepository(transactionDatabase)
	modelCatalogRepository := modelrepo.NewModelCatalogGormRepository(transactionDatabase)
	providerRegistryService := model.NewProviderRegistryService(providerRepository, providerModelRepository, modelCatalogRepository)
	inviteRepository := inviterepo.NewInviteGormRepository(transactionDatabase)
	inviteService := invite.NewInviteService(inviteRepository)
	authService := auth.NewAuthService(userService, apiKeyService, organizationService, projectService, inviteService)
	adminApiKeyAPI := organization2.NewAdminApiKeyAPI(organizationService, authService, apiKeyService, userService)
	projectApiKeyRoute := apikeys.NewProjectApiKeyRoute(organizationService, projectService, apiKeyService, userService)
	projectsRoute := projects.NewProjectsRoute(projectService, apiKeyService, authService, projectApiKeyRoute, providerRegistryService)
	invitesRoute := invites.NewInvitesRoute(inviteService, projectService, organizationService, authService)
	modelProviderRoute := organization2.NewModelProviderRoute(authService, providerRegistryService)
	organizationRoute := organization2.NewOrganizationRoute(adminApiKeyAPI, projectsRoute, invitesRoute, modelProviderRoute, authService)
	client := inference.NewJanRestyClient()
	chatCompletionClient := inference.NewJanChatCompletionClient(client)
	completionAPI := chat.NewCompletionAPI(chatCompletionClient, authService)
	chatRoute := chat.NewChatRoute(completionAPI)
	conversationRepository := conversationrepo.NewConversationGormRepository(transactionDatabase)
	itemRepository := itemrepo.NewItemGormRepository(transactionDatabase)
	conversationService := conversation.NewService(conversationRepository, itemRepository)
	completionNonStreamHandler := conv.NewCompletionNonStreamHandler(chatCompletionClient, conversationService)
	completionStreamHandler := conv.NewCompletionStreamHandler(chatCompletionClient, conversationService)
	chatModelClient := inference.NewJanChatModelClient(client)
	convCompletionAPI := conv.NewConvCompletionAPI(completionNonStreamHandler, completionStreamHandler, conversationService, authService, chatModelClient)
	serperService := serpermcp.NewSerperService()
	serperMCP := mcpimpl.NewSerperMCP(serperService)
	convMCPAPI := conv.NewConvMCPAPI(authService, serperMCP)
	convChatRoute := conv.NewConvChatRoute(authService, convCompletionAPI, convMCPAPI)
	workspaceRepository := workspacerepo.NewWorkspaceGormRepository(transactionDatabase)
	workspaceService := workspace.NewWorkspaceService(workspaceRepository, conversationRepository)
	workspaceRoute := conv.NewWorkspaceRoute(authService, workspaceService)
	conversationAPI := conversations.NewConversationAPI(conversationService, authService, workspaceService)
	modelAPI := v1.NewModelAPI(chatModelClient)
	providersAPI := v1.NewProvidersAPI(authService, projectService, providerRegistryService)
	mcpapi := mcp.NewMCPAPI(serperMCP, authService)
	googleAuthAPI := google.NewGoogleAuthAPI(userService, authService)
	authRoute := auth2.NewAuthRoute(googleAuthAPI, userService, authService)
	responseRepository := responserepo.NewResponseGormRepository(transactionDatabase)
	responseService := response.NewResponseService(responseRepository, itemRepository, conversationService)
	responseModelService := response.NewResponseModelService(userService, authService, apiKeyService, conversationService, responseService, chatModelClient, chatCompletionClient)
	streamModelService := response.NewStreamModelService(responseModelService)
	nonStreamModelService := response.NewNonStreamModelService(responseModelService)
	responseRoute := responses.NewResponseRoute(responseModelService, authService, responseService, streamModelService, nonStreamModelService)
	v1Route := v1.NewV1Route(organizationRoute, chatRoute, convChatRoute, workspaceRoute, conversationAPI, modelAPI, providersAPI, mcpapi, authRoute, responseRoute)
	httpServer := http.NewHttpServer(v1Route)
	cronService := cron.NewCronService()
	application := &Application{
		HttpServer:  httpServer,
		CronService: cronService,
	}
	return application, nil
}

func CreateDataInitializer() (*DataInitializer, error) {
	db := ProvideDatabase()
	transactionDatabase := transaction.NewDatabase(db)
	userRepository := userrepo.NewUserGormRepository(transactionDatabase)
	redisCacheService := cache.NewRedisCacheService()
	userService := user.NewService(userRepository, redisCacheService)
	apiKeyRepository := apikeyrepo.NewApiKeyGormRepository(transactionDatabase)
	organizationRepository := organizationrepo.NewOrganizationGormRepository(transactionDatabase)
	organizationService := organization.NewService(organizationRepository)
	apiKeyService := apikey.NewService(apiKeyRepository, organizationService)
	projectRepository := projectrepo.NewProjectGormRepository(transactionDatabase)
	projectService := project.NewService(projectRepository)
	inviteRepository := inviterepo.NewInviteGormRepository(transactionDatabase)
	inviteService := invite.NewInviteService(inviteRepository)
	authService := auth.NewAuthService(userService, apiKeyService, organizationService, projectService, inviteService)
	dataInitializer := &DataInitializer{
		authService: authService,
	}
	return dataInitializer, nil
}

// wire.go:

func ProvideDatabase() *gorm.DB {
	return database.DB
}
