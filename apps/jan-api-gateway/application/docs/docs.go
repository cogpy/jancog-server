// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/auth/google/callback": {
            "post": {
                "description": "Handles the callback from the Google OAuth2 provider to exchange the authorization code for a token, verify the user, and issue access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Google OAuth2 Callback",
                "parameters": [
                    {
                        "description": "Request body containing the authorization code and state",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/google.GoogleCallbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated and returned tokens",
                        "schema": {
                            "$ref": "#/definitions/google.AccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request (e.g., invalid state, missing code, or invalid claims)",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (e.g., a user claim is not found or is invalid in the context)",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/google/login": {
            "get": {
                "description": "Redirects the user to the Google OAuth2 authorization page to initiate the login process.",
                "tags": [
                    "Authentication"
                ],
                "summary": "Google OAuth2 Login",
                "responses": {
                    "307": {
                        "description": "Redirects to Google's login page"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/guest-login": {
            "post": {
                "description": "JWT-base Guest Login.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Guest Login",
                "responses": {
                    "200": {
                        "description": "Successfully refreshed the access token",
                        "schema": {
                            "$ref": "#/definitions/auth.AccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid refresh token)",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (e.g., expired or missing refresh token)",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/logout": {
            "get": {
                "description": "Use a valid refresh token to obtain a new access token. The refresh token is typically sent in a cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh an access token",
                "responses": {
                    "200": {
                        "description": "Successfully logout"
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid refresh token)",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (e.g., expired or missing refresh token)",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile of the authenticated user based on the provided JWT.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profile",
                        "schema": {
                            "$ref": "#/definitions/auth.GetMeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (e.g., missing or invalid JWT)",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/auth/refresh-token": {
            "get": {
                "description": "Use a valid refresh token to obtain a new access token. The refresh token is typically sent in a cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh an access token",
                "responses": {
                    "200": {
                        "description": "Successfully refreshed the access token",
                        "schema": {
                            "$ref": "#/definitions/auth.AccessTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., invalid refresh token)",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (e.g., expired or missing refresh token)",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/chat/completions": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a model response for the given chat conversation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "Create a chat completion",
                "parameters": [
                    {
                        "description": "Chat completion request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat.PostChatCompletionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/chat.ChatCompletionResponseSwagger"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/conversations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of conversations for the authenticated user.",
                "tags": [
                    "Conversations"
                ],
                "summary": "List Conversations",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "The maximum number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A cursor for use in pagination. The ID of the last object from the previous page",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order of items (asc/desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of conversations",
                        "schema": {
                            "$ref": "#/definitions/conversations.ListResponse-conversations_ConversationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new conversation for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Create a conversation",
                "parameters": [
                    {
                        "description": "Create conversation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/conversations.CreateConversationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created conversation",
                        "schema": {
                            "$ref": "#/definitions/conversations.ConversationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/conversations/{conversation_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a conversation by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Get a conversation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Conversation ID",
                        "name": "conversation_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conversation details",
                        "schema": {
                            "$ref": "#/definitions/conversations.ConversationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Conversation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a conversation and all its items",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Delete a conversation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Conversation ID",
                        "name": "conversation_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted conversation",
                        "schema": {
                            "$ref": "#/definitions/conversations.DeletedConversationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Conversation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates conversation metadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Update a conversation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Conversation ID",
                        "name": "conversation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update conversation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/conversations.UpdateConversationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated conversation",
                        "schema": {
                            "$ref": "#/definitions/conversations.ConversationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Conversation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/conversations/{conversation_id}/items": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Lists all items in a conversation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "List items in a conversation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Conversation ID",
                        "name": "conversation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items to return (1-100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order of items (asc/desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of items",
                        "schema": {
                            "$ref": "#/definitions/conversations.ConversationItemListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Conversation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds multiple items to a conversation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Create items in a conversation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Conversation ID",
                        "name": "conversation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create items request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/conversations.CreateItemsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created items",
                        "schema": {
                            "$ref": "#/definitions/conversations.ListResponse-conversations_ConversationItemResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Conversation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/conversations/{conversation_id}/items/{item_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific item from a conversation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Get an item from a conversation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Conversation ID",
                        "name": "conversation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item details",
                        "schema": {
                            "$ref": "#/definitions/conversations.ConversationItemResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Conversation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific item from a conversation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Conversations"
                ],
                "summary": "Delete an item from a conversation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Conversation ID",
                        "name": "conversation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item ID",
                        "name": "item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated conversation",
                        "schema": {
                            "$ref": "#/definitions/conversations.ConversationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Access denied",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Conversation not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/mcp": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Handles Model Context Protocol (MCP) requests over an HTTP stream. The response is sent as a continuous stream of data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "MCP"
                ],
                "summary": "MCP streamable endpoint",
                "parameters": [
                    {
                        "description": "MCP request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Streamed response (SSE or chunked transfer)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/models": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of available models that can be used for chat completions or other tasks.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Models"
                ],
                "summary": "List available models",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/v1.ModelsResponse"
                        }
                    }
                }
            }
        },
        "/v1/organization/admin_api_keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of all admin API keys for the authenticated organization.",
                "tags": [
                    "Organizations"
                ],
                "summary": "List Admin API Keys",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "The maximum number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A cursor for use in pagination. The ID of the last object from the previous page",
                        "name": "after",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of admin API keys",
                        "schema": {
                            "$ref": "#/definitions/organization.AdminApiKeyListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new admin API key for an organization. Requires a valid admin API key in the Authorization header.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create Admin API Key",
                "parameters": [
                    {
                        "description": "API key creation request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/organization.CreateOrganizationAdminAPIKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created admin API key",
                        "schema": {
                            "$ref": "#/definitions/organization.OrganizationAdminAPIKeyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid payload",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/organization/admin_api_keys/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific admin API key by its ID.",
                "tags": [
                    "Organizations"
                ],
                "summary": "Get Admin API Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the admin API key",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the admin API key",
                        "schema": {
                            "$ref": "#/definitions/organization.OrganizationAdminAPIKeyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - API key with the given ID does not exist or does not belong to the organization",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an admin API key by its ID.",
                "tags": [
                    "Organizations"
                ],
                "summary": "Delete Admin API Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the admin API key to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the admin API key",
                        "schema": {
                            "$ref": "#/definitions/organization.AdminAPIKeyDeletedResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - API key with the given ID does not exist or does not belong to the organization",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/organization/projects": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of all projects for the authenticated organization.",
                "tags": [
                    "Organizations"
                ],
                "summary": "List Projects",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "The maximum number of items to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "A cursor for use in pagination. The ID of the last object from the previous page",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Whether to include archived projects.",
                        "name": "include_archived",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of projects",
                        "schema": {
                            "$ref": "#/definitions/projects.ProjectListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new project for an organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create Project",
                "parameters": [
                    {
                        "description": "Project creation request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/projects.CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created project",
                        "schema": {
                            "$ref": "#/definitions/projects.ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid payload",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/organization/projects/{project_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific project by its ID.",
                "tags": [
                    "Organizations"
                ],
                "summary": "Get Project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the project",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the project",
                        "schema": {
                            "$ref": "#/definitions/projects.ProjectResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - project with the given ID does not exist or does not belong to the organization",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a specific project by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Update Project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the project to update",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project update request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/projects.UpdateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the project",
                        "schema": {
                            "$ref": "#/definitions/projects.ProjectResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid payload",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - project with the given ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/organization/projects/{project_id}/archive": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Archives a specific project by its ID, making it inactive.",
                "tags": [
                    "Organizations"
                ],
                "summary": "Archive Project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the project to archive",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully archived the project",
                        "schema": {
                            "$ref": "#/definitions/projects.ProjectResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid or missing API key",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - project with the given ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/organization/projects/{project_public_id}/api_keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List API keys for a specific project.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "List new project API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project Public ID",
                        "name": "project_public_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key created successfully",
                        "schema": {
                            "$ref": "#/definitions/apikeys.ApiKeyCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, e.g., invalid payload or missing IDs",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, e.g., invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found, e.g., project or organization not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new API key for a specific project.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organizations"
                ],
                "summary": "Create a new project API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project Public ID",
                        "name": "project_public_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body for creating an API key",
                        "name": "requestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apikeys.CreateApiKeyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key created successfully",
                        "schema": {
                            "$ref": "#/definitions/apikeys.ApiKeyCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request, e.g., invalid payload or missing IDs",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, e.g., invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found, e.g., project or organization not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/responses": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new LLM response for the given input. Supports multiple input types including text, images, files, web search, and more.\n\n**Supported Input Types:**\n- ` + "`" + `text` + "`" + `: Plain text input\n- ` + "`" + `image` + "`" + `: Image input (URL or base64)\n- ` + "`" + `file` + "`" + `: File input by file ID\n- ` + "`" + `web_search` + "`" + `: Web search input\n- ` + "`" + `file_search` + "`" + `: File search input\n- ` + "`" + `streaming` + "`" + `: Streaming input\n- ` + "`" + `function_calls` + "`" + `: Function calls input\n- ` + "`" + `reasoning` + "`" + `: Reasoning input\n\n**Example Request:**\n` + "`" + `` + "`" + `` + "`" + `json\n{\n\"model\": \"gpt-4\",\n\"input\": {\n\"type\": \"text\",\n\"text\": \"Hello, how are you?\"\n},\n\"max_tokens\": 100,\n\"temperature\": 0.7,\n\"stream\": false,\n\"background\": false\n}\n` + "`" + `` + "`" + `` + "`" + `\n\n**Response Format:**\nThe response uses embedded structure where all fields are at the top level:\n- ` + "`" + `jan_status` + "`" + `: Jan API status code (optional)\n- ` + "`" + `id` + "`" + `: Response identifier\n- ` + "`" + `object` + "`" + `: Object type (\"response\")\n- ` + "`" + `created` + "`" + `: Unix timestamp\n- ` + "`" + `model` + "`" + `: Model used\n- ` + "`" + `status` + "`" + `: Response status\n- ` + "`" + `input` + "`" + `: Input data\n- ` + "`" + `output` + "`" + `: Generated output\n\n**Example Response:**\n` + "`" + `` + "`" + `` + "`" + `json\n{\n\"jan_status\": \"000000\",\n\"id\": \"resp_1234567890\",\n\"object\": \"response\",\n\"created\": 1234567890,\n\"model\": \"gpt-4\",\n\"status\": \"completed\",\n\"input\": {\n\"type\": \"text\",\n\"text\": \"Hello, how are you?\"\n},\n\"output\": {\n\"type\": \"text\",\n\"text\": {\n\"value\": \"I'm doing well, thank you!\"\n}\n}\n}\n` + "`" + `` + "`" + `` + "`" + `\n\n**Response Status:**\n- ` + "`" + `completed` + "`" + `: Response generation finished successfully\n- ` + "`" + `processing` + "`" + `: Response is being generated\n- ` + "`" + `failed` + "`" + `: Response generation failed\n- ` + "`" + `cancelled` + "`" + `: Response was cancelled",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jan",
                    "Jan-Responses"
                ],
                "summary": "Create a response",
                "parameters": [
                    {
                        "description": "Request payload containing model, input, and generation parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/responses.CreateResponseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with embedded fields"
                    },
                    "202": {
                        "description": "Response accepted for background processing with embedded fields"
                    },
                    "400": {
                        "description": "Invalid request payload"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation error"
                    },
                    "429": {
                        "description": "Rate limit exceeded"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/responses/{response_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves an LLM response by its ID. Returns the complete response object with embedded structure where all fields are at the top level.\n\n**Response Format:**\nThe response uses embedded structure where all fields are at the top level:\n- ` + "`" + `jan_status` + "`" + `: Jan API status code (optional)\n- ` + "`" + `id` + "`" + `: Response identifier\n- ` + "`" + `object` + "`" + `: Object type (\"response\")\n- ` + "`" + `created` + "`" + `: Unix timestamp\n- ` + "`" + `model` + "`" + `: Model used\n- ` + "`" + `status` + "`" + `: Response status\n- ` + "`" + `input` + "`" + `: Input data\n- ` + "`" + `output` + "`" + `: Generated output",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jan",
                    "Jan-Responses"
                ],
                "summary": "Get a response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the response",
                        "name": "response_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with embedded fields"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Response not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an LLM response by its ID. Returns the deleted response object with embedded structure where all fields are at the top level.\n\n**Response Format:**\nThe response uses embedded structure where all fields are at the top level:\n- ` + "`" + `jan_status` + "`" + `: Jan API status code (optional)\n- ` + "`" + `id` + "`" + `: Response identifier\n- ` + "`" + `object` + "`" + `: Object type (\"response\")\n- ` + "`" + `created` + "`" + `: Unix timestamp\n- ` + "`" + `model` + "`" + `: Model used\n- ` + "`" + `status` + "`" + `: Response status (will be \"cancelled\")\n- ` + "`" + `input` + "`" + `: Input data\n- ` + "`" + `cancelled_at` + "`" + `: Cancellation timestamp",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jan",
                    "Jan-Responses"
                ],
                "summary": "Delete a response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the response",
                        "name": "response_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with embedded fields"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Response not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/responses/{response_id}/cancel": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancels a running LLM response that was created with background=true. Only responses that are currently processing can be cancelled.\n\n**Response Format:**\nThe response uses embedded structure where all fields are at the top level:\n- ` + "`" + `jan_status` + "`" + `: Jan API status code (optional)\n- ` + "`" + `id` + "`" + `: Response identifier\n- ` + "`" + `object` + "`" + `: Object type (\"response\")\n- ` + "`" + `created` + "`" + `: Unix timestamp\n- ` + "`" + `model` + "`" + `: Model used\n- ` + "`" + `status` + "`" + `: Response status (will be \"cancelled\")\n- ` + "`" + `input` + "`" + `: Input data\n- ` + "`" + `cancelled_at` + "`" + `: Cancellation timestamp",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jan",
                    "Jan-Responses"
                ],
                "summary": "Cancel a response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the response to cancel",
                        "name": "response_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response cancelled successfully with embedded fields"
                    },
                    "400": {
                        "description": "Invalid request or response cannot be cancelled"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Response not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/responses/{response_id}/input_items": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of input items for a response. Supports cursor-based pagination for efficient retrieval of large datasets.\n\n**Response Format:**\nThe response uses embedded structure where all fields are at the top level:\n- ` + "`" + `jan_status` + "`" + `: Jan API status code (optional)\n- ` + "`" + `first_id` + "`" + `: First item ID for pagination (optional)\n- ` + "`" + `last_id` + "`" + `: Last item ID for pagination (optional)\n- ` + "`" + `has_more` + "`" + `: Whether more items are available (optional)\n- ` + "`" + `id` + "`" + `: Input item identifier\n- ` + "`" + `object` + "`" + `: Object type (\"input_item\")\n- ` + "`" + `created` + "`" + `: Unix timestamp\n- ` + "`" + `type` + "`" + `: Input type\n- ` + "`" + `text` + "`" + `: Text content (for text type)\n- ` + "`" + `image` + "`" + `: Image content (for image type)\n- ` + "`" + `file` + "`" + `: File content (for file type)\n\n**Example Response:**\n` + "`" + `` + "`" + `` + "`" + `json\n{\n\"jan_status\": \"000000\",\n\"first_id\": \"input_123\",\n\"last_id\": \"input_456\",\n\"has_more\": false,\n\"id\": \"input_1234567890\",\n\"object\": \"input_item\",\n\"created\": 1234567890,\n\"type\": \"text\",\n\"text\": \"Hello, world!\"\n}\n` + "`" + `` + "`" + `` + "`" + `",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jan",
                    "Jan-Responses"
                ],
                "summary": "List input items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the response",
                        "name": "response_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of items to return (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination - return items after this ID",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor for pagination - return items before this ID",
                        "name": "before",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with paginated input items and embedded fields"
                    },
                    "400": {
                        "description": "Invalid request or pagination parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Response not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v1/version": {
            "get": {
                "description": "Returns the current build version of the API server.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jan Server"
                ],
                "summary": "Get API build version",
                "responses": {
                    "200": {
                        "description": "version info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apikeys.ApiKeyCreateResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "$ref": "#/definitions/apikeys.ApiKeyResponse"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "apikeys.ApiKeyResponse": {
            "type": "object",
            "properties": {
                "apikeyType": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "last_usedAt": {
                    "type": "string"
                },
                "permissions": {
                    "type": "string"
                },
                "plaintextHint": {
                    "type": "string"
                }
            }
        },
        "apikeys.CreateApiKeyRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                }
            }
        },
        "auth.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                }
            }
        },
        "auth.GetMeResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                }
            }
        },
        "chat.ChatCompletionChoice": {
            "type": "object",
            "properties": {
                "finish_reason": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "message": {
                    "$ref": "#/definitions/chat.Message"
                }
            }
        },
        "chat.ChatCompletionResponseSwagger": {
            "type": "object",
            "properties": {
                "choices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat.ChatCompletionChoice"
                    }
                },
                "created": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/chat.Usage"
                }
            }
        },
        "chat.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "chat.PostChatCompletionRequest": {
            "type": "object",
            "properties": {
                "max_tokens": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat.Message"
                    }
                },
                "model": {
                    "type": "string"
                },
                "temperature": {
                    "type": "number"
                }
            }
        },
        "chat.Usage": {
            "type": "object",
            "properties": {
                "completion_tokens": {
                    "type": "integer"
                },
                "prompt_tokens": {
                    "type": "integer"
                },
                "total_tokens": {
                    "type": "integer"
                }
            }
        },
        "conversation.ItemRole": {
            "type": "string",
            "enum": [
                "system",
                "user",
                "assistant"
            ],
            "x-enum-varnames": [
                "ItemRoleSystem",
                "ItemRoleUser",
                "ItemRoleAssistant"
            ]
        },
        "conversations.AnnotationResponse": {
            "type": "object",
            "properties": {
                "end_index": {
                    "type": "integer"
                },
                "file_id": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "start_index": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "conversations.ContentResponse": {
            "type": "object",
            "properties": {
                "file": {
                    "$ref": "#/definitions/conversations.FileContentResponse"
                },
                "image": {
                    "$ref": "#/definitions/conversations.ImageContentResponse"
                },
                "input_text": {
                    "type": "string"
                },
                "output_text": {
                    "$ref": "#/definitions/conversations.OutputTextResponse"
                },
                "text": {
                    "$ref": "#/definitions/conversations.TextResponse"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "conversations.ConversationContentRequest": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "text": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "conversations.ConversationItemListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/conversations.ConversationItemResponse"
                    }
                },
                "first_id": {
                    "type": "string"
                },
                "has_more": {
                    "type": "boolean"
                },
                "last_id": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                }
            }
        },
        "conversations.ConversationItemRequest": {
            "type": "object",
            "required": [
                "content",
                "type"
            ],
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/conversations.ConversationContentRequest"
                    }
                },
                "role": {
                    "$ref": "#/definitions/conversation.ItemRole"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "conversations.ConversationItemResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/conversations.ContentResponse"
                    }
                },
                "created_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "conversations.ConversationResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "object": {
                    "type": "string"
                }
            }
        },
        "conversations.CreateConversationRequest": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/conversations.ConversationItemRequest"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "conversations.CreateItemsRequest": {
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/conversations.ConversationItemRequest"
                    }
                }
            }
        },
        "conversations.DeletedConversationResponse": {
            "type": "object",
            "properties": {
                "deleted": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                }
            }
        },
        "conversations.FileContentResponse": {
            "type": "object",
            "properties": {
                "file_id": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "conversations.ImageContentResponse": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "file_id": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "conversations.ListResponse-conversations_ConversationItemResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/conversations.ConversationItemResponse"
                    }
                },
                "first_id": {
                    "type": "string"
                },
                "has_more": {
                    "type": "boolean"
                },
                "last_id": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "conversations.ListResponse-conversations_ConversationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/conversations.ConversationResponse"
                    }
                },
                "first_id": {
                    "type": "string"
                },
                "has_more": {
                    "type": "boolean"
                },
                "last_id": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "conversations.OutputTextResponse": {
            "type": "object",
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/conversations.AnnotationResponse"
                    }
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "conversations.TextResponse": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "conversations.UpdateConversationRequest": {
            "type": "object",
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "google.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                }
            }
        },
        "google.GoogleCallbackRequest": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "organization.AdminAPIKeyDeletedResponse": {
            "type": "object",
            "properties": {
                "deleted": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                }
            }
        },
        "organization.AdminApiKeyListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/organization.OrganizationAdminAPIKeyResponse"
                    }
                },
                "first_id": {
                    "type": "string"
                },
                "has_more": {
                    "type": "boolean"
                },
                "last_id": {
                    "type": "string"
                },
                "object": {
                    "type": "string",
                    "example": "list"
                }
            }
        },
        "organization.CreateOrganizationAdminAPIKeyRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "My Admin API Key"
                }
            }
        },
        "organization.OrganizationAdminAPIKeyResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer",
                    "example": 1698765432
                },
                "id": {
                    "type": "string",
                    "example": "key_1234567890"
                },
                "last_used_at": {
                    "type": "integer",
                    "example": 1698765432
                },
                "name": {
                    "type": "string",
                    "example": "My Admin API Key"
                },
                "object": {
                    "type": "string",
                    "example": "api_key"
                },
                "owner": {
                    "$ref": "#/definitions/organization.Owner"
                },
                "redacted_value": {
                    "type": "string",
                    "example": "sk-...abcd"
                },
                "value": {
                    "type": "string",
                    "example": "sk-abcdef1234567890"
                }
            }
        },
        "organization.Owner": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer",
                    "example": 1698765432
                },
                "id": {
                    "type": "string",
                    "example": "user_1234567890"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "object": {
                    "type": "string",
                    "example": "user"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "type": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "projects.CreateProjectRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "New AI Project"
                }
            }
        },
        "projects.ProjectListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/projects.ProjectResponse"
                    }
                },
                "first_id": {
                    "type": "string"
                },
                "has_more": {
                    "type": "boolean"
                },
                "last_id": {
                    "type": "string"
                },
                "object": {
                    "type": "string",
                    "example": "list"
                }
            }
        },
        "projects.ProjectResponse": {
            "type": "object",
            "properties": {
                "archived_at": {
                    "type": "integer",
                    "example": 1698765432
                },
                "created_at": {
                    "type": "integer",
                    "example": 1698765432
                },
                "id": {
                    "type": "string",
                    "example": "proj_1234567890"
                },
                "name": {
                    "type": "string",
                    "example": "My First Project"
                },
                "object": {
                    "type": "string",
                    "example": "project"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "projects.UpdateProjectRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Updated AI Project"
                }
            }
        },
        "responses.CreateResponseRequest": {
            "type": "object",
            "required": [
                "input",
                "model"
            ],
            "properties": {
                "generation": {
                    "type": "object",
                    "additionalProperties": true
                },
                "input": {
                    "type": "object",
                    "additionalProperties": true
                },
                "max_tokens": {
                    "type": "integer",
                    "example": 1000
                },
                "model": {
                    "type": "string",
                    "example": "gpt-4"
                },
                "stream": {
                    "type": "boolean",
                    "example": false
                },
                "temperature": {
                    "type": "number",
                    "example": 0.7
                }
            }
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "v1.Model": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "owned_by": {
                    "type": "string"
                }
            }
        },
        "v1.ModelsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1.Model"
                    }
                },
                "object": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Jan Server",
	Description:      "This is the API gateway for Jan Server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
