basePath: /
definitions:
  apikeys.CreateApiKeyRequest:
    properties:
      description:
        type: string
      expiresAt:
        type: string
    type: object
  auth.AccessTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      object:
        type: string
    type: object
  auth.GetMeResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      object:
        type: string
    type: object
  conv.Model:
    properties:
      created:
        type: integer
      id:
        type: string
      object:
        type: string
      owned_by:
        type: string
      provider_id:
        type: string
      provider_name:
        type: string
      provider_type:
        type: string
      provider_vendor:
        type: string
    type: object
  conv.ModelsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/conv.Model'
        type: array
      object:
        type: string
    type: object
  conversation.ItemRole:
    enum:
    - system
    - user
    - assistant
    - tool
    type: string
    x-enum-varnames:
    - ItemRoleSystem
    - ItemRoleUser
    - ItemRoleAssistant
    - ItemRoleTool
  conversations.AnnotationResponse:
    properties:
      end_index:
        type: integer
      file_id:
        type: string
      index:
        type: integer
      start_index:
        type: integer
      text:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  conversations.ContentResponse:
    properties:
      file:
        $ref: '#/definitions/conversations.FileContentResponse'
      finish_reason:
        type: string
      image:
        $ref: '#/definitions/conversations.ImageContentResponse'
      input_text:
        type: string
      output_text:
        $ref: '#/definitions/conversations.OutputTextResponse'
      reasoning_content:
        type: string
      text:
        $ref: '#/definitions/conversations.TextResponse'
      type:
        type: string
    type: object
  conversations.ConversationContentRequest:
    properties:
      text:
        type: string
      type:
        type: string
    required:
    - type
    type: object
  conversations.ConversationItemRequest:
    properties:
      content:
        items:
          $ref: '#/definitions/conversations.ConversationContentRequest'
        type: array
      role:
        $ref: '#/definitions/conversation.ItemRole'
      type:
        type: string
    required:
    - content
    - type
    type: object
  conversations.ConversationItemResponse:
    properties:
      content:
        items:
          $ref: '#/definitions/conversations.ContentResponse'
        type: array
      created_at:
        type: integer
      id:
        type: string
      object:
        type: string
      role:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  conversations.CreateConversationRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/conversations.ConversationItemRequest'
        type: array
      metadata:
        additionalProperties:
          type: string
        type: object
      title:
        type: string
    type: object
  conversations.CreateItemsRequest:
    properties:
      items:
        items:
          $ref: '#/definitions/conversations.ConversationItemRequest'
        type: array
    required:
    - items
    type: object
  conversations.DeletedConversationResponse:
    properties:
      deleted:
        type: boolean
      id:
        type: string
      object:
        type: string
    type: object
  conversations.ExtendedConversationResponse:
    properties:
      created_at:
        type: integer
      id:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      object:
        type: string
      title:
        type: string
    type: object
  conversations.FileContentResponse:
    properties:
      file_id:
        type: string
      mime_type:
        type: string
      name:
        type: string
      size:
        type: integer
    type: object
  conversations.ImageContentResponse:
    properties:
      detail:
        type: string
      file_id:
        type: string
      url:
        type: string
    type: object
  conversations.OutputTextResponse:
    properties:
      annotations:
        items:
          $ref: '#/definitions/conversations.AnnotationResponse'
        type: array
      text:
        type: string
    type: object
  conversations.TextResponse:
    properties:
      value:
        type: string
    type: object
  conversations.UpdateConversationRequest:
    properties:
      metadata:
        additionalProperties:
          type: string
        type: object
      title:
        type: string
    type: object
  google.AccessTokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      object:
        type: string
    type: object
  google.GoogleCallbackRequest:
    properties:
      code:
        type: string
      state:
        type: string
    required:
    - code
    type: object
  google.GoogleLoginUrl:
    properties:
      object:
        type: string
      url:
        type: string
    type: object
  invites.CreateInviteUserRequest:
    properties:
      email:
        type: string
      projects:
        items:
          $ref: '#/definitions/invites.InviteProject'
        type: array
      role:
        type: string
    type: object
  invites.InviteProject:
    properties:
      id:
        type: string
      role:
        type: string
    type: object
  invites.InviteResponse:
    properties:
      accepted_at:
        type: string
      email:
        type: string
      expires_at:
        type: string
      id:
        type: string
      invited_at:
        type: string
      object:
        type: string
      projects:
        items:
          $ref: '#/definitions/invites.InviteProject'
        type: array
      role:
        type: string
      status:
        type: string
    type: object
  invites.VerifyInviteUserRequest:
    properties:
      code:
        type: string
    type: object
  organization.AdminAPIKeyDeletedResponse:
    properties:
      deleted:
        type: boolean
      id:
        type: string
      object:
        type: string
    type: object
  organization.AdminApiKeyListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/organization.OrganizationAdminAPIKeyResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        example: list
        type: string
    type: object
  organization.CreateOrganizationAdminAPIKeyRequest:
    properties:
      name:
        example: My Admin API Key
        type: string
    required:
    - name
    type: object
  organization.OrganizationAdminAPIKeyResponse:
    properties:
      created_at:
        example: 1698765432
        type: integer
      id:
        example: key_1234567890
        type: string
      last_used_at:
        example: 1698765432
        type: integer
      name:
        example: My Admin API Key
        type: string
      object:
        example: api_key
        type: string
      owner:
        $ref: '#/definitions/organization.Owner'
      redacted_value:
        example: sk-...abcd
        type: string
      value:
        example: sk-abcdef1234567890
        type: string
    type: object
  organization.Owner:
    properties:
      created_at:
        example: 1698765432
        type: integer
      id:
        example: user_1234567890
        type: string
      name:
        example: John Doe
        type: string
      object:
        example: user
        type: string
      role:
        example: admin
        type: string
      type:
        example: user
        type: string
    type: object
  projects.CreateProjectRequest:
    properties:
      name:
        example: New AI Project
        type: string
    required:
    - name
    type: object
  projects.ProjectListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/projects.ProjectResponse'
        type: array
      first_id:
        type: string
      has_more:
        type: boolean
      last_id:
        type: string
      object:
        example: list
        type: string
    type: object
  projects.ProjectResponse:
    properties:
      archived_at:
        example: 1698765432
        type: integer
      created_at:
        example: 1698765432
        type: integer
      id:
        example: proj_1234567890
        type: string
      name:
        example: My First Project
        type: string
      object:
        example: project
        type: string
      status:
        type: string
    type: object
  projects.UpdateProjectRequest:
    properties:
      name:
        example: Updated AI Project
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      code:
        type: string
      error:
        type: string
    type: object
info:
  contact: {}
  description: This is the API gateway for Jan Server.
  title: Jan Server
  version: "1.0"
paths:
  /v1/auth/google/callback:
    post:
      consumes:
      - application/json
      description: Handles the callback from the Google OAuth2 provider to exchange
        the authorization code for a token, verify the user, and issue access and
        refresh tokens.
      parameters:
      - description: Request body containing the authorization code and state
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/google.GoogleCallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated and returned tokens
          schema:
            $ref: '#/definitions/google.AccessTokenResponse'
        "400":
          description: Bad request (e.g., invalid state, missing code, or invalid
            claims)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., a user claim is not found or is invalid
            in the context)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Google OAuth2 Callback
      tags:
      - Authentication API
  /v1/auth/google/login:
    get:
      description: Redirects the user to the Google OAuth2 authorization page to initiate
        the login process.
      responses:
        "200":
          description: redirect url
          schema:
            $ref: '#/definitions/google.GoogleLoginUrl'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Google OAuth2 Login
      tags:
      - Authentication API
  /v1/auth/guest-login:
    post:
      description: JWT-base Guest Login.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed the access token
          schema:
            $ref: '#/definitions/auth.AccessTokenResponse'
        "400":
          description: Bad Request (e.g., invalid refresh token)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., expired or missing refresh token)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Guest Login
      tags:
      - Authentication API
  /v1/auth/logout:
    get:
      consumes:
      - application/json
      description: Use a valid refresh token to obtain a new access token. The refresh
        token is typically sent in a cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logout
        "400":
          description: Bad Request (e.g., invalid refresh token)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., expired or missing refresh token)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Refresh an access token
      tags:
      - Authentication API
  /v1/auth/me:
    get:
      description: Retrieves the profile of the authenticated user based on the provided
        JWT.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/auth.GetMeResponse'
        "401":
          description: Unauthorized (e.g., missing or invalid JWT)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Authentication API
  /v1/auth/refresh-token:
    get:
      consumes:
      - application/json
      description: Use a valid refresh token to obtain a new access token. The refresh
        token is typically sent in a cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed the access token
          schema:
            $ref: '#/definitions/auth.AccessTokenResponse'
        "400":
          description: Bad Request (e.g., invalid refresh token)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized (e.g., expired or missing refresh token)
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Refresh an access token
      tags:
      - Authentication API
  /v1/chat/completions:
    post:
      consumes:
      - application/json
      description: |-
        Generates a model response for the given chat conversation. This is a standard chat completion API that supports both streaming and non-streaming modes without conversation persistence.

        **Streaming Mode (stream=true):**
        - Returns Server-Sent Events (SSE) with real-time streaming
        - Streams completion chunks directly from the inference model
        - Final event contains "[DONE]" marker

        **Non-Streaming Mode (stream=false or omitted):**
        - Returns single JSON response with complete completion
        - Standard OpenAI ChatCompletionResponse format

        **Features:**
        - Supports all OpenAI ChatCompletionRequest parameters
        - User authentication required
        - Direct inference model integration
        - No conversation persistence (stateless)
      parameters:
      - description: Chat completion request with streaming options
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      - text/event-stream
      responses:
        "200":
          description: 'Successful streaming response (when stream=true) - SSE format
            with data: {json} events'
          schema:
            type: string
        "400":
          description: Invalid request payload, empty messages, or inference failure
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid authentication
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a chat completion
      tags:
      - Chat Completions API
  /v1/conv/chat/completions:
    post:
      consumes:
      - application/json
      description: |-
        Generates a model response for the given chat conversation with conversation persistence and management. This is the conversation-aware version of the chat completion API that supports both streaming and non-streaming modes with conversation management and storage options.

        **Streaming Mode (stream=true):**
        - Returns Server-Sent Events (SSE) with real-time streaming
        - First event contains conversation metadata
        - Subsequent events contain completion chunks
        - Final event contains "[DONE]" marker

        **Non-Streaming Mode (stream=false or omitted):**
        - Returns single JSON response with complete completion
        - Includes conversation metadata in response

        **Storage Options:**
        - `store=true`: Saves user message and assistant response to conversation
        - `store_reasoning=true`: Includes reasoning content in stored messages
        - `conversation`: ID of existing conversation or empty for new conversation

        **Features:**
        - Conversation persistence and history management
        - Extended request format with conversation and storage options
        - User authentication required
        - Automatic conversation creation and management
      parameters:
      - description: Extended chat completion request with streaming, storage, and
          conversation options
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      - text/event-stream
      responses:
        "200":
          description: 'Successful streaming response (when stream=true) - SSE format
            with data: {json} events'
          schema:
            type: string
        "400":
          description: Invalid request payload or conversation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - missing or invalid authentication
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Conversation not found or user not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a conversation-aware chat completion
      tags:
      - Conversation-aware Chat API
  /v1/conv/mcp:
    post:
      consumes:
      - application/json
      description: Handles Model Context Protocol (MCP) requests over an HTTP stream
        for conversation-aware chat functionality. The response is sent as a continuous
        stream of data with conversation context.
      parameters:
      - description: MCP request payload
        in: body
        name: request
        required: true
        schema: {}
      produces:
      - text/event-stream
      responses:
        "200":
          description: Streamed response (SSE or chunked transfer)
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: MCP streamable endpoint for conversation-aware chat
      tags:
      - Conversation-aware Chat API
  /v1/conv/models:
    get:
      consumes:
      - application/json
      description: Retrieves a list of available models that can be used for conversation-aware
        chat completions. This endpoint provides the same model list as the standard
        /v1/models endpoint but is specifically designed for conversation-aware chat
        functionality.
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            $ref: '#/definitions/conv.ModelsResponse'
        "401":
          description: Unauthorized - missing or invalid authentication
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List available models for conversation-aware chat
      tags:
      - Conversation-aware Chat API
  /v1/conversations:
    get:
      description: Retrieves a paginated list of conversations for the authenticated
        user with OpenAI-compatible response format.
      parameters:
      - default: 20
        description: The maximum number of items to return
        in: query
        name: limit
        type: integer
      - description: A cursor for use in pagination. The ID of the last object from
          the previous page
        in: query
        name: after
        type: string
      - description: Order of items (asc/desc)
        in: query
        name: order
        type: string
      responses:
        "200":
          description: Successfully retrieved the list of conversations
          schema:
            type: object
        "400":
          description: Bad Request - Invalid pagination parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Conversations
      tags:
      - Conversations API
    post:
      consumes:
      - application/json
      description: Creates a new conversation for the authenticated user with optional
        items
      parameters:
      - description: Create conversation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/conversations.CreateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created conversation
          schema:
            $ref: '#/definitions/conversations.ExtendedConversationResponse'
        "400":
          description: Invalid request - Bad payload, too many items, or invalid item
            format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a conversation
      tags:
      - Conversations API
  /v1/conversations/{conversation_id}:
    delete:
      description: Deletes a conversation and all its items permanently
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted conversation
          schema:
            $ref: '#/definitions/conversations.DeletedConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a conversation
      tags:
      - Conversations API
    get:
      description: Retrieves a conversation by its ID with full metadata and title
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Conversation details
          schema:
            $ref: '#/definitions/conversations.ExtendedConversationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a conversation
      tags:
      - Conversations API
    patch:
      consumes:
      - application/json
      description: Updates conversation title and/or metadata
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Update conversation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/conversations.UpdateConversationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated conversation
          schema:
            $ref: '#/definitions/conversations.ExtendedConversationResponse'
        "400":
          description: Invalid request payload or update failed
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a conversation
      tags:
      - Conversations API
  /v1/conversations/{conversation_id}/items:
    get:
      description: Lists all items in a conversation with OpenAI-compatible pagination
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Number of items to return (1-100)
        in: query
        name: limit
        type: integer
      - description: Cursor for pagination - ID of the last item from previous page
        in: query
        name: after
        type: string
      - description: Order of items (asc/desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of items
          schema:
            type: object
        "400":
          description: Bad Request - Invalid pagination parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List items in a conversation
      tags:
      - Conversations API
    post:
      consumes:
      - application/json
      description: Adds multiple items to a conversation with OpenAI-compatible format
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Create items request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/conversations.CreateItemsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Created items
          schema:
            type: object
        "400":
          description: Invalid request payload or invalid item format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Conversation not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create items in a conversation
      tags:
      - Conversations API
  /v1/conversations/{conversation_id}/items/{item_id}:
    delete:
      description: Deletes a specific item from a conversation and returns the deleted
        item details
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted item details
          schema:
            $ref: '#/definitions/conversations.ConversationItemResponse'
        "400":
          description: Bad Request - Deletion failed
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Conversation or item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an item from a conversation
      tags:
      - Conversations API
    get:
      description: Retrieves a specific item from a conversation with full content
        details
      parameters:
      - description: Conversation ID
        in: path
        name: conversation_id
        required: true
        type: string
      - description: Item ID
        in: path
        name: item_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item details
          schema:
            $ref: '#/definitions/conversations.ConversationItemResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Conversation or item not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an item from a conversation
      tags:
      - Conversations API
  /v1/mcp:
    post:
      consumes:
      - application/json
      description: Handles Model Context Protocol (MCP) requests over an HTTP stream.
        The response is sent as a continuous stream of data.
      parameters:
      - description: MCP request payload
        in: body
        name: request
        required: true
        schema: {}
      produces:
      - text/event-stream
      responses:
        "200":
          description: Streamed response (SSE or chunked transfer)
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: MCP streamable endpoint
      tags:
      - Chat Completions API
  /v1/organization/admin_api_keys:
    get:
      description: Retrieves a paginated list of all admin API keys for the authenticated
        organization.
      parameters:
      - default: 20
        description: The maximum number of items to return
        in: query
        name: limit
        type: integer
      - description: A cursor for use in pagination. The ID of the last object from
          the previous page
        in: query
        name: after
        type: string
      responses:
        "200":
          description: Successfully retrieved the list of admin API keys
          schema:
            $ref: '#/definitions/organization.AdminApiKeyListResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Admin API Keys
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Creates a new admin API key for an organization. Requires a valid
        admin API key in the Authorization header.
      parameters:
      - description: API key creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/organization.CreateOrganizationAdminAPIKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created admin API key
          schema:
            $ref: '#/definitions/organization.OrganizationAdminAPIKeyResponse'
        "400":
          description: Bad request - invalid payload
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Admin API Key
      tags:
      - Administration API
  /v1/organization/admin_api_keys/{id}:
    delete:
      description: Deletes an admin API key by its ID.
      parameters:
      - description: ID of the admin API key to delete
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully deleted the admin API key
          schema:
            $ref: '#/definitions/organization.AdminAPIKeyDeletedResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found - API key with the given ID does not exist or does
            not belong to the organization
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Admin API Key
      tags:
      - Administration API
    get:
      description: Retrieves a specific admin API key by its ID.
      parameters:
      - description: ID of the admin API key
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved the admin API key
          schema:
            $ref: '#/definitions/organization.OrganizationAdminAPIKeyResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found - API key with the given ID does not exist or does
            not belong to the organization
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Admin API Key
      tags:
      - Administration API
  /v1/organization/invites:
    get:
      description: Retrieves a paginated list of invites for the current organization.
      parameters:
      - description: Cursor pointing to a record after which to fetch results
        in: query
        name: after
        type: string
      - description: Maximum number of results to return
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: Successfully retrieved list of invites
          schema:
            type: object
        "400":
          description: Invalid or missing query parameter
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Organization Invites
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Creates a new invite for a user to join the organization.
      parameters:
      - description: Invite request payload
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/invites.CreateInviteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created invite
          schema:
            $ref: '#/definitions/invites.InviteResponse'
        "400":
          description: Invalid request payload or user already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Invite
      tags:
      - Administration API
  /v1/organization/invites/{invite_id}:
    delete:
      description: Deletes a specific invite by its ID. Only organization owners can
        delete invites.
      parameters:
      - description: Public ID of the invite
        in: path
        name: invite_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully deleted invite
          schema:
            type: object
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Forbidden - only owners can delete invites
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Invite not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Invite
      tags:
      - Administration API
    get:
      description: Retrieves a specific invite by its ID.
      parameters:
      - description: Public ID of the invite
        in: path
        name: invite_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved invite
          schema:
            $ref: '#/definitions/invites.InviteResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Invite not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve Invite
      tags:
      - Administration API
  /v1/organization/invites/verification:
    post:
      consumes:
      - application/json
      description: Verifies an invitation code, checks expiration, registers the user
        if necessary, and assigns project memberships.
      parameters:
      - description: Verification request payload
        in: body
        name: verification
        required: true
        schema:
          $ref: '#/definitions/invites.VerifyInviteUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully verified invite
          schema:
            $ref: '#/definitions/invites.InviteResponse'
        "400":
          description: Invalid or expired invite code
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Verify Invite
      tags:
      - Administration API
  /v1/organization/projects:
    get:
      description: Retrieves a paginated list of all projects for the authenticated
        organization.
      parameters:
      - default: 20
        description: The maximum number of items to return
        in: query
        name: limit
        type: integer
      - description: A cursor for use in pagination. The ID of the last object from
          the previous page
        in: query
        name: after
        type: string
      - description: Whether to include archived projects.
        in: query
        name: include_archived
        type: string
      responses:
        "200":
          description: Successfully retrieved the list of projects
          schema:
            $ref: '#/definitions/projects.ProjectListResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Projects
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Creates a new project for an organization.
      parameters:
      - description: Project creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/projects.CreateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created project
          schema:
            $ref: '#/definitions/projects.ProjectResponse'
        "400":
          description: Bad request - invalid payload
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Project
      tags:
      - Administration API
  /v1/organization/projects/{project_id}:
    get:
      description: Retrieves a specific project by its ID.
      parameters:
      - description: ID of the project
        in: path
        name: project_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved the project
          schema:
            $ref: '#/definitions/projects.ProjectResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found - project with the given ID does not exist or does
            not belong to the organization
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Project
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Updates a specific project by its ID.
      parameters:
      - description: ID of the project to update
        in: path
        name: project_id
        required: true
        type: string
      - description: Project update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/projects.UpdateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the project
          schema:
            $ref: '#/definitions/projects.ProjectResponse'
        "400":
          description: Bad request - invalid payload
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found - project with the given ID does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Project
      tags:
      - Administration API
  /v1/organization/projects/{project_id}/archive:
    post:
      description: Archives a specific project by its ID, making it inactive.
      parameters:
      - description: ID of the project to archive
        in: path
        name: project_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully archived the project
          schema:
            $ref: '#/definitions/projects.ProjectResponse'
        "401":
          description: Unauthorized - invalid or missing API key
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found - project with the given ID does not exist
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Archive Project
      tags:
      - Administration API
  /v1/organization/projects/{project_public_id}/api_keys:
    get:
      consumes:
      - application/json
      description: List API keys for a specific project.
      parameters:
      - description: Project Public ID
        in: path
        name: project_public_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: API key created successfully
          schema:
            type: object
        "400":
          description: Bad request, e.g., invalid payload or missing IDs
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found, e.g., project or organization not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List new project API key
      tags:
      - Administration API
    post:
      consumes:
      - application/json
      description: Creates a new API key for a specific project.
      parameters:
      - description: Project Public ID
        in: path
        name: project_public_id
        required: true
        type: string
      - description: Request body for creating an API key
        in: body
        name: requestBody
        required: true
        schema:
          $ref: '#/definitions/apikeys.CreateApiKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: API key created successfully
          schema:
            type: object
        "400":
          description: Bad request, e.g., invalid payload or missing IDs
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized, e.g., invalid or missing token
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found, e.g., project or organization not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new project API key
      tags:
      - Administration API
  /v1/responses:
    post:
      consumes:
      - application/json
      description: |-
        Creates a new LLM response for the given input. Supports multiple input types including text, images, files, web search, and more.

        **Supported Input Types:**
        - `text`: Plain text input
        - `image`: Image input (URL or base64)
        - `file`: File input by file ID
        - `web_search`: Web search input
        - `file_search`: File search input
        - `streaming`: Streaming input
        - `function_calls`: Function calls input
        - `reasoning`: Reasoning input

        **Example Request:**
        ```json
        {
        "model": "gpt-4",
        "input": {
        "type": "text",
        "text": "Hello, how are you?"
        },
        "max_tokens": 100,
        "temperature": 0.7,
        "stream": false,
        "background": false
        }
        ```

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `id`: Response identifier
        - `object`: Object type ("response")
        - `created`: Unix timestamp
        - `model`: Model used
        - `status`: Response status
        - `input`: Input data
        - `output`: Generated output

        **Example Response:**
        ```json
        {
        "jan_status": "000000",
        "id": "resp_1234567890",
        "object": "response",
        "created": 1234567890,
        "model": "gpt-4",
        "status": "completed",
        "input": {
        "type": "text",
        "text": "Hello, how are you?"
        },
        "output": {
        "type": "text",
        "text": {
        "value": "I'm doing well, thank you!"
        }
        }
        }
        ```

        **Response Status:**
        - `completed`: Response generation finished successfully
        - `processing`: Response is being generated
        - `failed`: Response generation failed
        - `cancelled`: Response was cancelled
      parameters:
      - description: Request payload containing model, input, and generation parameters
        in: body
        name: request
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Created response
          schema:
            type: object
        "202":
          description: Response accepted for background processing
          schema:
            type: object
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "429":
          description: Rate limit exceeded
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a response
      tags:
      - Responses API
  /v1/responses/{response_id}:
    delete:
      consumes:
      - application/json
      description: |-
        Deletes an LLM response by its ID. Returns the deleted response object with embedded structure where all fields are at the top level.

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `id`: Response identifier
        - `object`: Object type ("response")
        - `created`: Unix timestamp
        - `model`: Model used
        - `status`: Response status (will be "cancelled")
        - `input`: Input data
        - `cancelled_at`: Cancellation timestamp
      parameters:
      - description: Unique identifier of the response
        in: path
        name: response_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deleted response
          schema:
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Response not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a response
      tags:
      - Responses API
    get:
      consumes:
      - application/json
      description: |-
        Retrieves an LLM response by its ID. Returns the complete response object with embedded structure where all fields are at the top level.

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `id`: Response identifier
        - `object`: Object type ("response")
        - `created`: Unix timestamp
        - `model`: Model used
        - `status`: Response status
        - `input`: Input data
        - `output`: Generated output
      parameters:
      - description: Unique identifier of the response
        in: path
        name: response_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response details
          schema:
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Response not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a response
      tags:
      - Responses API
  /v1/responses/{response_id}/cancel:
    post:
      consumes:
      - application/json
      description: |-
        Cancels a running LLM response that was created with background=true. Only responses that are currently processing can be cancelled.

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `id`: Response identifier
        - `object`: Object type ("response")
        - `created`: Unix timestamp
        - `model`: Model used
        - `status`: Response status (will be "cancelled")
        - `input`: Input data
        - `cancelled_at`: Cancellation timestamp
      parameters:
      - description: Unique identifier of the response to cancel
        in: path
        name: response_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response cancelled successfully
          schema:
            type: object
        "400":
          description: Invalid request or response cannot be cancelled
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Response not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel a response
      tags:
      - Responses API
  /v1/responses/{response_id}/input_items:
    get:
      consumes:
      - application/json
      description: |-
        Retrieves a paginated list of input items for a response. Supports cursor-based pagination for efficient retrieval of large datasets.

        **Response Format:**
        The response uses embedded structure where all fields are at the top level:
        - `jan_status`: Jan API status code (optional)
        - `first_id`: First item ID for pagination (optional)
        - `last_id`: Last item ID for pagination (optional)
        - `has_more`: Whether more items are available (optional)
        - `id`: Input item identifier
        - `object`: Object type ("input_item")
        - `created`: Unix timestamp
        - `type`: Input type
        - `text`: Text content (for text type)
        - `image`: Image content (for image type)
        - `file`: File content (for file type)

        **Example Response:**
        ```json
        {
        "jan_status": "000000",
        "first_id": "input_123",
        "last_id": "input_456",
        "has_more": false,
        "id": "input_1234567890",
        "object": "input_item",
        "created": 1234567890,
        "type": "text",
        "text": "Hello, world!"
        }
        ```
      parameters:
      - description: Unique identifier of the response
        in: path
        name: response_id
        required: true
        type: string
      - description: 'Maximum number of items to return (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Cursor for pagination - return items after this ID
        in: query
        name: after
        type: string
      - description: Cursor for pagination - return items before this ID
        in: query
        name: before
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of input items
          schema:
            type: object
        "400":
          description: Invalid request or pagination parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Response not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List input items
      tags:
      - Responses API
  /v1/version:
    get:
      description: Returns the current build version of the API server.
      produces:
      - application/json
      responses:
        "200":
          description: version info
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get API build version
      tags:
      - Server API
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
